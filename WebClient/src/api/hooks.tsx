/* Generated by restful-react */

import React from 'react';
import {
    Get,
    GetProps,
    useGet,
    UseGetProps,
    Mutate,
    MutateProps,
    useMutate,
    UseMutateProps,
} from 'restful-react';
export const SPEC_VERSION = '1.0';
export interface CreateMessageDto {
    message: string;
    roomId: string;
    userId: string;
}

export interface CreateMessageVm {
    id?: string;
    roomId?: string;
    userId?: string;
    message?: string | null;
    timestamp?: string;
}

export interface CreateRoomDto {
    name: string;
}

export interface CreateUserVm {
    id?: string;
    username?: string | null;
}

export interface GetMessageVm {
    id?: string;
    roomId?: string;
    userId?: string;
    message?: string | null;
    timestamp?: string;
}

export interface GetRoomVm {
    id?: string;
    name?: string | null;
}

export interface GetUserVm {
    id?: string;
    username?: string | null;
}

export interface JoinRoomDto {
    connectionId?: string | null;
}

export type MessageCreateProps = Omit<
    MutateProps<CreateMessageVm, unknown, void, CreateMessageDto, void>,
    'path' | 'verb'
>;

export const MessageCreate = (props: MessageCreateProps) => (
    <Mutate<CreateMessageVm, unknown, void, CreateMessageDto, void>
        verb="POST"
        path={`/api/message`}
        {...props}
    />
);

export type UseMessageCreateProps = Omit<
    UseMutateProps<CreateMessageVm, unknown, void, CreateMessageDto, void>,
    'path' | 'verb'
>;

export const useMessageCreate = (props: UseMessageCreateProps) =>
    useMutate<CreateMessageVm, unknown, void, CreateMessageDto, void>(
        'POST',
        `/api/message`,
        props,
    );

export type RoomCreateProps = Omit<
    MutateProps<GetRoomVm, unknown, void, CreateRoomDto, void>,
    'path' | 'verb'
>;

export const RoomCreate = (props: RoomCreateProps) => (
    <Mutate<GetRoomVm, unknown, void, CreateRoomDto, void>
        verb="POST"
        path={`/api/room`}
        {...props}
    />
);

export type UseRoomCreateProps = Omit<
    UseMutateProps<GetRoomVm, unknown, void, CreateRoomDto, void>,
    'path' | 'verb'
>;

export const useRoomCreate = (props: UseRoomCreateProps) =>
    useMutate<GetRoomVm, unknown, void, CreateRoomDto, void>(
        'POST',
        `/api/room`,
        props,
    );

export type RoomGetAllProps = Omit<
    GetProps<GetRoomVm[], unknown, void, void>,
    'path'
>;

export const RoomGetAll = (props: RoomGetAllProps) => (
    <Get<GetRoomVm[], unknown, void, void> path={`/api/room`} {...props} />
);

export type UseRoomGetAllProps = Omit<
    UseGetProps<GetRoomVm[], unknown, void, void>,
    'path'
>;

export const useRoomGetAll = (props: UseRoomGetAllProps) =>
    useGet<GetRoomVm[], unknown, void, void>(`/api/room`, props);

export interface RoomGetAllRoomMessagesPathParams {
    roomId: string;
}

export type RoomGetAllRoomMessagesProps = Omit<
    GetProps<GetMessageVm[], unknown, void, RoomGetAllRoomMessagesPathParams>,
    'path'
> &
    RoomGetAllRoomMessagesPathParams;

export const RoomGetAllRoomMessages = ({
    roomId,
    ...props
}: RoomGetAllRoomMessagesProps) => (
    <Get<GetMessageVm[], unknown, void, RoomGetAllRoomMessagesPathParams>
        path={`/api/room/${roomId}/messages`}
        {...props}
    />
);

export type UseRoomGetAllRoomMessagesProps = Omit<
    UseGetProps<
        GetMessageVm[],
        unknown,
        void,
        RoomGetAllRoomMessagesPathParams
    >,
    'path'
> &
    RoomGetAllRoomMessagesPathParams;

export const useRoomGetAllRoomMessages = ({
    roomId,
    ...props
}: UseRoomGetAllRoomMessagesProps) =>
    useGet<GetMessageVm[], unknown, void, RoomGetAllRoomMessagesPathParams>(
        (paramsInPath: RoomGetAllRoomMessagesPathParams) =>
            `/api/room/${paramsInPath.roomId}/messages`,
        { pathParams: { roomId }, ...props },
    );

export interface RoomGetAllRoomUsersPathParams {
    roomId: string;
}

export type RoomGetAllRoomUsersProps = Omit<
    GetProps<GetUserVm[], unknown, void, RoomGetAllRoomUsersPathParams>,
    'path'
> &
    RoomGetAllRoomUsersPathParams;

export const RoomGetAllRoomUsers = ({
    roomId,
    ...props
}: RoomGetAllRoomUsersProps) => (
    <Get<GetUserVm[], unknown, void, RoomGetAllRoomUsersPathParams>
        path={`/api/room/${roomId}/users`}
        {...props}
    />
);

export type UseRoomGetAllRoomUsersProps = Omit<
    UseGetProps<GetUserVm[], unknown, void, RoomGetAllRoomUsersPathParams>,
    'path'
> &
    RoomGetAllRoomUsersPathParams;

export const useRoomGetAllRoomUsers = ({
    roomId,
    ...props
}: UseRoomGetAllRoomUsersProps) =>
    useGet<GetUserVm[], unknown, void, RoomGetAllRoomUsersPathParams>(
        (paramsInPath: RoomGetAllRoomUsersPathParams) =>
            `/api/room/${paramsInPath.roomId}/users`,
        { pathParams: { roomId }, ...props },
    );

export interface RoomJoinRoomPathParams {
    roomId: string;
}

export type RoomJoinRoomProps = Omit<
    MutateProps<void, unknown, void, JoinRoomDto, RoomJoinRoomPathParams>,
    'path' | 'verb'
> &
    RoomJoinRoomPathParams;

export const RoomJoinRoom = ({ roomId, ...props }: RoomJoinRoomProps) => (
    <Mutate<void, unknown, void, JoinRoomDto, RoomJoinRoomPathParams>
        verb="POST"
        path={`/api/room/${roomId}/join`}
        {...props}
    />
);

export type UseRoomJoinRoomProps = Omit<
    UseMutateProps<void, unknown, void, JoinRoomDto, RoomJoinRoomPathParams>,
    'path' | 'verb'
> &
    RoomJoinRoomPathParams;

export const useRoomJoinRoom = ({ roomId, ...props }: UseRoomJoinRoomProps) =>
    useMutate<void, unknown, void, JoinRoomDto, RoomJoinRoomPathParams>(
        'POST',
        (paramsInPath: RoomJoinRoomPathParams) =>
            `/api/room/${paramsInPath.roomId}/join`,
        { pathParams: { roomId }, ...props },
    );

export interface UserGetOnePathParams {
    userId: string;
}

export type UserGetOneProps = Omit<
    GetProps<GetUserVm, unknown, void, UserGetOnePathParams>,
    'path'
> &
    UserGetOnePathParams;

export const UserGetOne = ({ userId, ...props }: UserGetOneProps) => (
    <Get<GetUserVm, unknown, void, UserGetOnePathParams>
        path={`/api/user/${userId}`}
        {...props}
    />
);

export type UseUserGetOneProps = Omit<
    UseGetProps<GetUserVm, unknown, void, UserGetOnePathParams>,
    'path'
> &
    UserGetOnePathParams;

export const useUserGetOne = ({ userId, ...props }: UseUserGetOneProps) =>
    useGet<GetUserVm, unknown, void, UserGetOnePathParams>(
        (paramsInPath: UserGetOnePathParams) =>
            `/api/user/${paramsInPath.userId}`,
        { pathParams: { userId }, ...props },
    );

export type UserCreateProps = Omit<
    MutateProps<CreateUserVm, unknown, void, void, void>,
    'path' | 'verb'
>;

export const UserCreate = (props: UserCreateProps) => (
    <Mutate<CreateUserVm, unknown, void, void, void>
        verb="POST"
        path={`/api/user`}
        {...props}
    />
);

export type UseUserCreateProps = Omit<
    UseMutateProps<CreateUserVm, unknown, void, void, void>,
    'path' | 'verb'
>;

export const useUserCreate = (props: UseUserCreateProps) =>
    useMutate<CreateUserVm, unknown, void, void, void>(
        'POST',
        `/api/user`,
        props,
    );
